开发越来越慢了，功能无规划地添加，逻辑越来越乱。

在原有的权重路由的基础上加上了关键字路由……关键字路由本来就是很耗费资源的（缓冲存机制明显很重要）。

而且现在打算是针对大量数据来做适配，关键字路由是必须品。

其实关键字路由是不得已才加上去的，源于测试中的一段代码：

```javascript
var my = Binder({
  content:{
    firstName:'Gaubee',
    lastName:'bangeel',
    fullName:'Gaubee bangeel'
  },
  key:'fullName'
});
my.binding({
  binder:my,
  bindKeys:['firstName','lastName'],
  updateKeys:'fullName'
});
```

完整的配置信息为：权重默认是取```my```的权重，默认不妥协更新(即权重相等的情况下不被更新)，默认不强制更新(无视权重关系)，默认异步(根据权重推入异步队列)。

在这个情况下更新关键字```firstName```或者是```lastName```，```fullName```随之被更新，而后再试出触发```binder(my)```的绑定队列，由于发出更新者的更新权重为默认值（更新发起者的权重），与新的更新信息权重相等，而且不妥协更新，因此更新链断开。看上去正常运行，该更新的更新了，也没有照成无线循环，但弊端也是很明显的，盲目遍历更新链，仅仅用权重来判定是否持续更新。

这明显无法将设计与代码抽象隔离。正确的配置思路如下：```fullName```是只读属性，完全依赖于```firstName```与```lastName```，而且必须同步更新，强制性地。

```javascript
my.binding({
  binder:my,
  bindKeys:['firstName','lastName'],
  updateKeys:['fullName'],
  asyUpdate:true,
  forceUpdate:true,
}) ;
```

所以关键字判定这一模块不得不添加进来，当```firstName```改变后，遍历绑定关系队列，查找```bindKey```内有```firstName```的绑定链，找到后引发更新，```fullName```被更新，继续触发，找不到关键字联系，停止更新。

另外，在这一层面上提供抽象的关键字。
因为```my.set```函数并不会添加不存在的对象属性变更，比如```my.set({age:20})```。由于初始化的时候并没有```age```这个属性，所以只会激活一个```age```的虚关键字的更新。所以将```simple-Binder```类型的对象作为专门的路由器，用于协调管理的数据关系。

```javascript
var route = Binder({
  content:'相关描述',
  key:'name',
});
var student = Binder({
  content:{name:'gaubee',lesson:'software'}
  key:'name'
});
var detail = Binder({
  content:{name:'gaubee',age:20,email:'@something'},
  key:'name'
});
my.binding({
  binder:route,
  bindKeys:['firstName','lastName'],
  updateKeys:['myName']//虚关键字
}) 
route.binding({
  binder:student,
  bindKeys:['myName'],
}); 
route.binding({
  binder:detail,
  bindKeys:['myName'],
});
```

如你所见，```route```对象用于管理相关的对象，只要```myName```这个虚关键字被触发，它所管理的对象就都会被触发更新。后期会提供更多面的抽象方法，以提供了面向对象形式的管理。
比如```object-Binder```对象提供```replace```方法用于销毁自身但将绑定链保留给新的对象，这个方法用于```content```的变更。虽然提供了```extend```方法，但也仅仅是拓展对象，无法完全替换对象内容。
现在还需要提供绑定信息的共享等。

至于缓存机制（生成静态函数直接运行进行更新）以及数组（绑定信息共享）依然是等到0.3版本进行完善。

**2013/4/1 14:33**