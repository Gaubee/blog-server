自从硬盘损坏，没有上传到Github的开发数据丢失以后，我便重新思考JDRela这个库要怎么写，思考为什么越写到后面越难维护。

新的JDRela没有用Gruntjs做开发，而是一次性写出核心的东西，跟随JS的思想，做出基本的原型（Object），而后在其集成的基础上在做出Simple、Array与Function。随后项目就被我搁置了。因为我意识到如果继续这样写下去，为浏览器端拓展DOM类型、jQuery类型的数据绑定。我在思考其规模、可维护性……
结果不言而喻，单单内置DOM操作就很难了，因为这与核心的架构相驳， **JDRela内部是使用缓存机制进行数据操作，意味着深拷贝一整个Object**。而DOM操作是需要直接操作DOM元素，这样我如果重写核心的get、set等基本的API，又不和原本的核心相驳的话，整个数据缓存的读写会变得十分冗余。

再想到jQuery的对象……我开始考虑插件机制。因为jQuery有很多API，如果我要考虑周全的的话，核心部分很多都要改写，所以我不得不考虑用设计的插件API来实现DOM、jQuery还有其他库的数据操作的方式。这让我很头疼，并不是其难度，因为想到还要这样费脑力地书写来实现绑定的兼容。而且脱离原本他人书写习惯，把别人的代码包裹上一层我的代码，别说别人了，就算是我也很讨厌，等于让别人半浸入式地去开发这个库，而不是像使用jQuery一样的感觉。

我开始重新思考这个库的立足点与设计思路、设计方向。反思……这是一个实现 **描述一个持久化数据关系的库**，```c = a+b;```不在意味着将a与b的值给c，而是c是a与b的追随着。

我暂且放下DOM操作。直接思考如何写jQuery同时使用这个库。想起前天看到腾讯前段博客发表的一篇文章，关于[AOP](http://www.alloyteam.com/2013/05/javascript-code-with-aop-improvement/)。我觉得有些眉目了，我不应该改变jQueryer的书写习惯，但是我可以追随他们的书写习惯，让他们在操作数据的同时来操作隐式操作我的数据API，最简单的方法就是：
```js
var ls = JDRelaFac.$(  $("li")  );//ls将返回一个被修改过API的的jQuery对象
```
接下来声明过数据关系后，用户就可以继续用他们的jQuery书写方式来写他们的业务了。

这便意味着，我并不需要在JDRela内部再暴露什么接口来实现插件，而是整个JDRela库就是一个API，核心的就是把用户需要的插件结构都都写在trigger内部，保证最大的自由度。而后就是包裹原本对象的API。比如：
```js
ls.css = function(css){//此处只为可读性，不代表最终实现方式
  var result = this.__private__._content.css(css);//$("li").css(css);
  this.set(css);
  return result;
}
```

所以现在我所要做的就是优化现有的JDRela的效率，并为其书写一些基本的但是必要的插件。

**2013-06-01 09:02:24**